openapi: 3.0.3
info:
  title: Watch and Chill
  description: |-
    This is a sample application for demonstrating CI/CD using GitOps and Kubernetes.

    Some useful links:

    * [The Pet Watch and Chill repository](https://github.com/lago-morph/chiller)
    * [Design document corresponding to this version of the API](https://github.com/lago-morph/chiller/wiki/Let's-Watch-design)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
tags:
  - name: movies
    description: Lists of movies
  - name: user
    description: Operations about user
paths:
  /user/login/{user_name}:
    get:
      tags:
        - user
      summary: Log in as user
      description: Log in as the specified user and get the authentication token
      operationId: loginUser
      responses:
        '200':
          description: Successful login
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        '404':
          description: User not found
      parameters: &Username_in_path
        - in: path
          name: user_name
          description: Username
          schema:
            type: string
          required: true
    parameters: []
  /user/create:
    post:
      tags:
        - user
      summary: Create a new user
      description: ''
      operationId: createUser
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User object validation error
        '403':
          description: Duplicate user name
      requestBody:
        description: 'User to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /movies/list/{user_id}:
    summary: Get list of movies for a user
    get:
      summary: Get the list of movies for a user
      operationId: listMovies
      responses:
        '200':
          description: Movie list for user (may be empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieList'
        '404':
          description: User ID not found
      tags: &movies_tag
        - movies
      parameters: &userID_in_path
        - in: path
          name: user_id
          description: 'user ID'
          schema:
            type: integer
          required: true
  /movies/add/{user_id}:
    summary: Add to list of movies for a user
    post:
      summary: Add a movie to user's list
      description: ''
      operationId: addMovie
      responses:
        '200':
          description: Movie added
        '400':
          description: Movie object validation error
        '404':
          description: User ID not found
      tags: *movies_tag
      parameters: *userID_in_path
      requestBody:
        description: Movie to add to user list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
      xml:
        name: user
    JWT:
      type: object
      properties:
        token:
          type: string
          description: JWT token
          example: abcdEF.qwer45ty.token
      description: JWT token
      required:
        - token
    Movie:
      type: object
      properties:
        name:
          type: string
          description: The name of the movie
          example: "test movie"
      description: Movie object
      required:
        - name
    MovieList:
      type: array
      items:
        $ref: '#/components/schemas/Movie'
      description: Movie list
