openapi: 3.0.3
info:
  title: Watch and Chill
  description: >-
    This is a sample application for demonstrating CI/CD using GitOps and
    Kubernetes.


    Some useful links:


    * [The Pet Watch and Chill
    repository](https://github.com/lago-morph/chiller)

    * [Design document corresponding to this version of the
    API](https://github.com/lago-morph/chiller/wiki/Let's-Watch-design)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: movies
    description: Lists of movies
  - name: user
    description: Operations about user
paths:
  /user/login/{username}:
    get:
      tags:
        - user
      summary: Log in as user
      description: Log in as the specified user and get the authentication token
      operationId: loginUser
      requestBody:
        description: ''
      responses:
        '200':
          description: Successful login
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        '404':
          description: User not found
          content: {}
          headers: {}
      parameters:
        - in: path
          name: username
          description: Username to log in as
          schema:
            type: string
          required: true
    parameters: []
  /user/create:
    post:
      tags:
        - user
      summary: Create a new user
      description: ''
      operationId: createUser
      parameters: []
      responses:
        '201':
          description: User created successfully
          content: {}
          headers: {}
        '400':
          description: User object validation error
          content: {}
          headers: {}
        '403':
          description: Duplicate user name
          content: {}
          headers: {}
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /movies/list/{userID}:
    summary: Get list of movies for a user
    get:
      summary: Get the list of movies for a user
      description: ''
      operationId: listMovies
      responses:
        '200':
          description: Movie list for user (may be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
                description: Movie list
        '404':
          description: User ID not found
          content: &ref_0 {}
          headers: &ref_1 {}
      tags: &ref_2
        - movies
      parameters: &ref_3
        - in: path
          name: userID
          description: ''
          schema:
            type: integer
          required: true
  /movies/add/{userID}:
    summary: Get list of movies for a user
    post:
      summary: Add a movie to user's list
      description: ''
      operationId: addMovie
      responses:
        '200':
          description: Movie added
        '400':
          description: Movie object validation error
          content: *ref_0
          headers: *ref_1
      tags: *ref_2
      parameters: *ref_3
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
              description: Movie to add to user list
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
      xml:
        name: user
    JWT:
      type: object
      properties:
        token:
          type: string
          description: JWT token
      description: JWT token
      required:
        - token
    Movie:
      type: object
      properties:
        name:
          type: string
          description: The name of the movie
      description: Movie object
      required:
        - name
